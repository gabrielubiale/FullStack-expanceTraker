frontEnd:
    npm install axios
    npm install chart.js 
    npm install moment
    npm install react-chartjs-2
    npm install react-datepicker
    npm install styled-components

continues before 1:27:20

1. Análise do sistema:

    1.1 Arquitetura Geral:
        Entenda a estrutura geral do software, incluindo módulos, componentes e como eles se relacionam.
        Identifique os principais fluxos de trabalho e como os diferentes componentes interagem.
    
    1.2 Tecnologias Utilizadas:
        Liste as linguagens de programação, frameworks, bibliotecas e ferramentas utilizadas no software.
        Compreenda por que cada tecnologia foi escolhida e como ela contribui para o sistema.

    1.3 Estrutura de Dados:
        Analise a estrutura de dados, como bancos de dados, formatos de armazenamento e esquemas de banco de dados.
        Estude as tabelas, relacionamentos, índices e consultas SQL usadas.

    1.4 Padrões de Codificação:

    Avalie a consistência do código-fonte, incluindo convenções de nomenclatura, estilo de codificação e organização de diretórios.
    Identifique quaisquer padrões de design ou arquiteturais aplicados no código.

Segurança:

Verifique como o software lida com a segurança, incluindo autenticação, autorização, proteção contra injeção de SQL, entre outros aspectos de segurança.
Documentação:

Procure por documentação, como comentários no código, READMEs, documentação técnica e descrição de APIs.
A documentação ajuda a entender o propósito de diferentes partes do software.
Fluxo de Trabalho do Usuário:

Siga os principais fluxos de trabalho do usuário no software para entender como os usuários interagem com o sistema.
Avalie a usabilidade e a experiência do usuário.
Testes:

Verifique se existem testes automatizados (testes unitários, testes de integração, etc.) e como eles são implementados.
Estude casos de teste e testes de aceitação.
Desempenho e Otimização:

Analise o desempenho do software, incluindo tempos de resposta, escalabilidade e otimizações.
Identifique áreas que podem ser aprimoradas em termos de desempenho.
Integrações e APIs:

Verifique se o software se integra a outros sistemas ou serviços por meio de APIs.
Entenda como as integrações são implementadas.
Gerenciamento de Erros:

Observe como o software lida com exceções e erros.
Verifique se há registros de erros e monitoramento.
Gerenciamento de Dados:

Analise como os dados são armazenados, recuperados, atualizados e excluídos.
Considere questões de consistência e integridade dos dados.
Seguimento de Mudanças (Versionamento):

Verifique se o software utiliza controle de versão, como Git, e como as alterações são gerenciadas.
Estratégias de Implementação:

Entenda como as atualizações e implantações do software são realizadas.
Avalie estratégias de implantação contínua (CI/CD).
Comunicação com a Equipe:

Caso você tenha acesso a membros da equipe que desenvolveram o software, converse com eles para obter informações adicionais e insights.
Boas Práticas:

Avalie se o software segue boas práticas de desenvolvimento, como DRY (Don't Repeat Yourself), SOLID, e outros princípios.
Métricas e Monitoramento:

Verifique se o software coleta métricas de uso e desempenho.
Explore as ferramentas de monitoramento utilizadas.
Licenças e Dependências:

Certifique-se de que você entende as licenças de software de terceiros e as dependências usadas.
